# -*- coding: utf-8 -*-
"""tf.keras Inception-ResNet v2 97% acc

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/easonchen24/tf-keras-inception-resnet-v2-97-acc.b4f48bce-3c0b-43ea-a241-43e9948b1f96.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250413/auto/storage/goog4_request%26X-Goog-Date%3D20250413T182421Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D120a7f6956bf69a18c6366738b3d435dfb7278d88ae9408953e6bd8999d086ad221c95349adfb9648c082c1ac309d831f6bb87e5df4c90162b2c09ef1213717ff40a4aac6e09722ab438998a5a9ee6153ab0258277d0251a7d17273e49415958dfbc2cbadd184ab767506d6e678e2221df9ee8efcdc19691d435e0c3b50b3a6fa01a679470acc3e17feb95f61d8fd619e89eeacac642985faf18d893795cc1430edbcb9747d90e3733b107015f25c2f7379ab892d478dde4648e41259effe1492d3bf8841242b9fd9a4271e61cd56c5f25d5ee9183880cd0b3cf76191a3fbacc645e147b357fdd51938d8e6e188316a6637bdd464c84fb207f24d15a42602e4a
"""

# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE
# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.
# import kagglehub
# kagglehub.login()

# # IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# # THEN FEEL FREE TO DELETE THIS CELL.
# # NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# # ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# # NOTEBOOK.

# plant_seedlings_classification_path = kagglehub.competition_download('plant-seedlings-classification')

print('Data source import complete.')

"""# Simple notebook for accurate predictions using the build-in Inception-ResNet V2 module in TensorFlow (tf.keras).

I got an embarrasing score back when this competition was running so I decided to revisit with this notebook. :-)

With validation turned off (validation_split set to 0.0 in train_datagen) this scores 97% as "late submission".

**First import TensorFlow and Pandas**
"""

import tensorflow as tf
import pandas as pd
import os
"""**Secondly define the neural network. We use the build-in module for Inception-ResNet V2 in tf.keras.**

We don't import the output layer, however as we don't have 1000 different categories. Instead we add a few layers for our 12 catagories.
"""
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"
gpus = tf.config.list_physical_devices('GPU')
if gpus:
    print("✅ GPU detected:", gpus)
else:
    print("⚠️ No GPU found. Using CPU.")

def define_model(width, height):
    model_input = tf.keras.layers.Input(shape=(width, height, 3), name='image_input')
    model_main = tf.keras.applications.inception_resnet_v2.InceptionResNetV2(include_top=False, weights='imagenet')(model_input)
    model_dense1 = tf.keras.layers.Flatten()(model_main)
    model_dense2 = tf.keras.layers.Dense(128, activation='relu')(model_dense1)
    model_out = tf.keras.layers.Dense(12, activation="softmax")(model_dense2)

    model = tf.keras.models.Model(model_input,  model_out)
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.00004, beta_1=0.9, beta_2=0.999)
    model.compile(loss="categorical_crossentropy", optimizer=optimizer, metrics=["accuracy"])
    return model

"""**Next, the code for the data generators that take care of traversing through the directories with images and augmenting the images as needed for training.**"""

def define_generators():
    train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(
        rotation_range=360,
        width_shift_range=0.3,
        height_shift_range=0.3,
        shear_range=0.3,
        zoom_range=0.5,
        vertical_flip=True,
        horizontal_flip=True,
        validation_split=0.0, # change to use validation instead of training on entire training set
    )

    train_generator = train_datagen.flow_from_directory(
        directory='plant-seedlings-classification/train',
        target_size=(width, height),
        batch_size=batch_size,
        color_mode='rgb',
        class_mode="categorical",
        subset='training',
    )

    validation_generator = train_datagen.flow_from_directory(
        directory='plant-seedlings-classification/train',
        target_size=(width, height),
        batch_size=batch_size,
        color_mode='rgb',
        class_mode="categorical",
        subset='validation',
    )

    test_datagen = tf.keras.preprocessing.image.ImageDataGenerator()

    test_generator = test_datagen.flow_from_directory(
        directory='plant-seedlings-classification/',
        classes=['test'],
        target_size=(width, height),
        batch_size=1,
        color_mode='rgb',
        shuffle=False,
        class_mode='categorical')

    return train_generator, validation_generator, test_generator

"""**Define the checkpoint save callback on validation accuracy.**

It is not currently used, but you can if you want to work on the model with the highest accuracy instead of the last training epoch.
"""

def define_callbacks():
    save_callback = tf.keras.callbacks.ModelCheckpoint(
        filepath='model.h5',
        monitor='val_acc',
        save_best_only=True,
        verbose=1
    )

    return save_callback

"""**Define some constants.**

These are number of epochs to train, images per batch, image width and height in pixels and the names of each class/species for the submission file
"""

nb_epoch     = 40
batch_size   = 16
width        = 299
height       = 299
species_list = ["Black-grass", "Charlock", "Cleavers", "Common Chickweed", "Common wheat", "Fat Hen",
                "Loose Silky-bent", "Maize", "Scentless Mayweed", "Shepherds Purse", "Small-flowered Cranesbill",
                "Sugar beet"]

"""**Now, define the model and fit it with the training data.**"""

model = define_model(width, height)
model.summary()
train_generator, validation_generator, test_generator = define_generators()
save_callback = define_callbacks()

model.fit(
    train_generator,
    epochs=nb_epoch,
    steps_per_epoch=train_generator.samples // batch_size,
    validation_data= validation_generator,
    validation_steps=validation_generator.samples // batch_size,
#    callbacks=[save_callback] UNCOMMENT THIS LINE TO SAVE BEST VAL_ACC MODEL
)

"""**Cool, now we (hopefully) have a model that can predict the species!**

Call it to get the predictions, and create a pandas dataframe with the species names of the highest probabilities. finally save the dataframe as the submission file.
"""

predictions = model.predict(test_generator, steps=test_generator.samples)

class_list = []

for i in range(0, predictions.shape[0]):
  y_class = predictions[i, :].argmax(axis=-1)
  class_list += [species_list[y_class]]

submission = pd.DataFrame()
submission['file'] = test_generator.filenames
submission['file'] = submission['file'].str.replace(r'test/', '')
submission['species'] = class_list

submission.to_csv('submission.csv', index=False)
os.system('kaggle competitions submit -c plant-seedlings-classification -f submission.csv -m "Inception-ResNet V2"')
print('Submission file generated. All done.')